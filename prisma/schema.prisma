generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id
  name         String
  email        String      @unique
  gender       UserGender?
  cpf          String?     @unique
  picture_url  String
  phone_number String?
  password     String
  birthdate    DateTime
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now()) @updatedAt

  addresses              Address?
  comments               Comment[]
  favoriteEstablishments FavoriteEstablishment[]
  establishments         Establishment[]

  @@map("users")
}

model EstablishmentCategory {
  id          String   @id
  name        String
  description String   @db.VarChar(500)
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  establishments Establishment[]

  @@map("establishment_categories")
}

model Establishment {
  id                     String                @id
  name                   String
  cnpj                   String                @unique
  description            String
  status                 Boolean               @default(true)
  picture_url            String
  background_picture_url String?
  category               EstablishmentCategory @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id            String
  user                   User                  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id                String
  created_at             DateTime              @default(now())
  updated_at             DateTime              @default(now()) @updatedAt

  address                  Address?
  comments                 Comment[]
  favoriteEstablishments   FavoriteEstablishment[]
  establishmentContacts    EstablishmentContact[]
  establishmentWorkingTime EstablishmentWorkingTime?

  @@map("establishments")
}

model EstablishmentContact {
  id               String        @id
  phone_number     String?
  email            String?
  establishment    Establishment @relation(fields: [establishment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  establishment_id String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now()) @updatedAt

  @@map("establishment_contacts")
}

model EstablishmentWorkingTime {
  id                String        @id
  opening_time      String
  closing_time      String
  establishment     Establishment @relation(fields: [establishment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  establishment_id  String        @unique
  open_on_sunday    Boolean
  open_on_monday    Boolean
  open_on_tuesday   Boolean
  open_on_wednesday Boolean
  open_on_thursday  Boolean
  open_on_friday    Boolean
  open_on_saturday  Boolean
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now()) @updatedAt

  @@map("establishments_working_time")
}

model Address {
  id               String         @id
  city             String
  street           String
  number           Int
  neighborhood     String
  complement       String?
  zip_code         String
  state            String
  country          String
  user             User?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id          String?        @unique
  establishment    Establishment? @relation(fields: [establishment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  establishment_id String?        @unique
  created_at       DateTime       @default(now())
  updated_at       DateTime       @default(now()) @updatedAt

  @@map("addresses")
}

model Comment {
  id               String        @id
  evaluation_note  Int
  description      String
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id          String
  establishment    Establishment @relation(fields: [establishment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  establishment_id String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now()) @updatedAt

  @@map("comments")
}

model FavoriteEstablishment {
  id               String        @id
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id          String
  establishment    Establishment @relation(fields: [establishment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  establishment_id String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @default(now()) @updatedAt

  @@map("favorite_establishments")
}

enum UserGender {
  male
  female
}
